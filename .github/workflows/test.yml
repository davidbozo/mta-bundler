name: Go Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  statuses: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      id: test
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Upload coverage to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.out
        retention-days: 30
    
    - name: Comment test results
      uses: actions/github-script@v7
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        script: |
          const testPassed = process.env.TEST_PASSED === 'true';
          const emoji = testPassed ? '✅' : '❌';
          const status = testPassed ? 'PASSED' : 'FAILED';
          
          console.log(`${emoji} Go Tests ${status} for commit ${context.sha.substring(0, 7)}`);
          
          // Create a commit status
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: testPassed ? 'success' : 'failure',
            description: `Go Tests ${status}`,
            context: 'ci/go-tests'
          });
      env:
        TEST_PASSED: ${{ steps.test.outcome == 'success' }}